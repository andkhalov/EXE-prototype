@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix exe:  <https://exe.ai#> .

################################################################################
# Ontology Header
################################################################################

exe:EXEOntology a owl:Ontology ;
    rdfs:label "EXE Ontology" ;
    rdfs:comment """
An ontology describing the EXE ecosystem in detail. It defines:
 - Agents (their networks, capabilities, and data formats),
 - Tasks (including statuses, resources, collaboration),
 - Various protocol types (DeFi, GameFi, SocialFi, Gambling),
 - Interactions (H2M, M2M, M2H),
 - Negotiations between agents,
 - On-chain contracts,
 - and the concept of collaboration to achieve complex tasks.
""" ;
    owl:versionInfo "2.0.0" .

################################################################################
# Core Classes
################################################################################

###
# Agent, Network, Contract
###

# Represents an autonomous agent in the EXE ecosystem
exe:Agent a owl:Class ;
    rdfs:label "Agent" ;
    rdfs:comment """
An entity (human, AI, or automated software component) capable of:
 - Performing tasks,
 - Holding tokens,
 - Negotiating with other agents,
 - Interacting with smart contracts,
 - Operating on specific blockchain networks,
 - Potentially bridging to the EXE main environment.
""" .

# Class for describing a particular blockchain network
exe:BlockchainNetwork a owl:Class ;
    rdfs:label "Blockchain Network" ;
    rdfs:comment """
Represents a distinct blockchain or sidechain on which Agents or Contracts operate 
(e.g., Ethereum, CrossFi Testnet, BNB Chain). Contains information such as chain ID.
""" .

# Describes a bridging mechanism or resource that links an Agent or Contract to EXE
exe:Bridge a owl:Class ;
    rdfs:label "Bridge" ;
    rdfs:comment """
Represents a bridging mechanism or infrastructure that connects a blockchain 
environment or an Agent to the EXE protocol (e.g., cross-chain bridge solutions, 
layer-2 bridging, etc.).
""" .

# Represents a smart contract on-chain
exe:Contract a owl:Class ;
    rdfs:label "Contract" ;
    rdfs:comment """
A smart contract deployed on a blockchain network. Contains an address, possible ABI, 
and references the network on which it runs.
""" .

###
# Protocol Hierarchy
###

# A decentralized application that integrates EXE (abstract parent class)
exe:dApp a owl:Class ;
    rdfs:label "dApp" ;
    rdfs:comment """
A decentralized application integrating with the EXE protocol for agent collaboration 
or domain-specific operations. Subclasses may include DeFi, GameFi, SocialFi, etc.
""" .

# General class for referencing different specialized protocols
exe:Protocol a owl:Class ;
    rdfs:label "Protocol" ;
    rdfs:comment """
A specific protocol or platform that a dApp implements. Protocol can be 
DeFi, GameFi, SocialFi, Gambling, or other specialized categories.
""" ;
    rdfs:subClassOf exe:dApp .

# DeFi sub-protocol
exe:DeFiProtocol a owl:Class ;
    rdfs:label "DeFi Protocol" ;
    rdfs:comment """
A decentralized finance protocol offering lending, liquidity pools, staking, 
flash loans, or other financial services. 
""" ;
    rdfs:subClassOf exe:Protocol .

# GameFi sub-protocol
exe:GameFiProtocol a owl:Class ;
    rdfs:label "GameFi Protocol" ;
    rdfs:comment """
A protocol focusing on blockchain-based gaming, where Agents may participate 
in game mechanics, asset trading, or in-game economies.
""" ;
    rdfs:subClassOf exe:Protocol .

# SocialFi sub-protocol
exe:SocialFiProtocol a owl:Class ;
    rdfs:label "SocialFi Protocol" ;
    rdfs:comment """
A protocol blending social networking features with decentralized finance 
(e.g. social tokens, influence mining, tokenized communities).
""" ;
    rdfs:subClassOf exe:Protocol .

# Gambling sub-protocol
exe:GamblingProtocol a owl:Class ;
    rdfs:label "Gambling Protocol" ;
    rdfs:comment """
A protocol enabling betting, casino-like games, lotteries, or other forms 
of chance-based interaction on-chain.
""" ;
    rdfs:subClassOf exe:Protocol .

###
# Tasks, Collaboration, Negotiation
###

# A unit of work or job to be performed in the EXE ecosystem
exe:Task a owl:Class ;
    rdfs:label "Task" ;
    rdfs:comment """
A discrete piece of work that may involve multiple Agents, resources, 
tokens for payment, and specific protocols. Tasks can have statuses (Created, 
InProgress, Completed, Cancelled) and may require a Collaboration among Agents.
""" .

# A concept representing possible task statuses
exe:TaskStatus a owl:Class ;
    rdfs:label "Task Status" ;
    rdfs:comment """
Enumerates the lifecycle states a Task can be in (Created, InProgress, Completed, Cancelled).
""" .

# A class describing multi-agent collaboration for a given Task
exe:Collaboration a owl:Class ;
    rdfs:label "Collaboration" ;
    rdfs:comment """
Represents a collaborative group or arrangement where multiple Agents 
collectively work on (or negotiate about) a Task. This might involve 
role distribution, negotiation, shared resources, and outcome coordination.
""" .

# A class describing a negotiation process among Agents (part of a Collaboration)
exe:Negotiation a owl:Class ;
    rdfs:label "Negotiation" ;
    rdfs:comment """
Represents a negotiation event or process where Agents or roles discuss terms 
(payment, execution details, resource sharing) to arrive at a mutual agreement 
on how to complete or price a Task. 
""" .

###
# Resources, Tokens, Events, Interaction Types
###

# Any resource needed for task execution (e.g., compute, data, external API)
exe:Resource a owl:Class ;
    rdfs:label "Resource" ;
    rdfs:comment """
A generic resource required to fulfill a Task (GPU compute, data sets, web APIs, 
or other external dependencies).
""" .

# A digital asset or token in the EXE ecosystem
exe:Token a owl:Class ;
    rdfs:label "Token" ;
    rdfs:comment """
Represents a cryptographic token (ERC-20, etc.), used for payments, staking, 
collateral, or rewards in tasks or protocol interactions.
""" .

# Any significant occurrence or action in the network, typically logged on-chain
exe:Event a owl:Class ;
    rdfs:label "Event" ;
    rdfs:comment """
Captures a notable occurrence: creation or completion of tasks, payment releases, 
agent registrations, negotiations, or protocol actions. 
Often references tasks, collaborations, or agents involved.
""" .

# Class representing different interaction patterns (Human-to-Machine, etc.)
exe:InteractionType a owl:Class ;
    rdfs:label "Interaction Type" ;
    rdfs:comment """
Specifies the mode of interaction or communication between parties: 
H2M (human-to-machine), M2M (machine-to-machine), M2H (machine-to-human).
""" .

###
# Roles & Capabilities
###

exe:Role a owl:Class ;
    rdfs:label "Role" ;
    rdfs:comment """
Defines a functional or operational role an Agent can have in the EXE ecosystem 
(e.g., Validator, Lender, LiquidityProvider, Player, etc.).
""" .

exe:Capability a owl:Class ;
    rdfs:label "Capability" ;
    rdfs:comment """
Represents a specific skill or function an Agent can perform (e.g., 
'providesLiquidity', 'validatesTransactions', 'managesGameAssets'). 
Agents can hold multiple capabilities.
""" .

# Data format representation
exe:DataFormat a owl:Class ;
    rdfs:label "Data Format" ;
    rdfs:comment """
Describes the format in which an Agent produces or consumes data 
(e.g., JSON, XML, binary, or a domain-specific format).
""" .

################################################################################
# Example Individuals (Statuses, Interaction Types, etc.)
################################################################################

# Task Status Individuals
exe:Created a owl:NamedIndividual , exe:TaskStatus ;
    rdfs:label "Created" ;
    rdfs:comment "Task is newly created but not yet started." .

exe:InProgress a owl:NamedIndividual , exe:TaskStatus ;
    rdfs:label "InProgress" ;
    rdfs:comment "Task is actively being worked on by one or more Agents." .

exe:Completed a owl:NamedIndividual , exe:TaskStatus ;
    rdfs:label "Completed" ;
    rdfs:comment "Task has been fully finished, meeting all requirements." .

exe:Cancelled a owl:NamedIndividual , exe:TaskStatus ;
    rdfs:label "Cancelled" ;
    rdfs:comment "Task was terminated or became invalid before successful completion." .

# Interaction Type Individuals
exe:H2M a owl:NamedIndividual , exe:InteractionType ;
    rdfs:label "Human-to-Machine" ;
    rdfs:comment """
Represents interactions initiated by a human (Agent) to a machine system 
or automated Agent.
""" .

exe:M2M a owl:NamedIndividual , exe:InteractionType ;
    rdfs:label "Machine-to-Machine" ;
    rdfs:comment """
Represents interactions between two automated systems or software Agents 
without direct human involvement.
""" .

exe:M2H a owl:NamedIndividual , exe:InteractionType ;
    rdfs:label "Machine-to-Human" ;
    rdfs:comment """
Represents an automated system or Agent providing information, data, or 
requests to a human participant.
""" .

# Example blockchain networks
exe:EthereumNetwork a owl:NamedIndividual , exe:BlockchainNetwork ;
    rdfs:label "Ethereum" ;
    rdfs:comment "The main Ethereum network." .

exe:CrossFiNetwork a owl:NamedIndividual , exe:BlockchainNetwork ;
    rdfs:label "CrossFi" ;
    rdfs:comment "An example cross-chain or testnet network." .

################################################################################
# Object Properties (Relationships)
################################################################################

# Which network an Agent or a Contract operates on
exe:operatesOnNetwork a owl:ObjectProperty ;
    rdfs:domain [ owl:unionOf ( exe:Agent exe:Contract ) ] ;
    rdfs:range exe:BlockchainNetwork ;
    rdfs:label "operates on network" ;
    rdfs:comment """
Indicates the blockchain network on which an Agent is primarily active or 
where a Contract is deployed.
""" .

# Bridge used by an Agent or Contract to connect to EXE
exe:hasBridge a owl:ObjectProperty ;
    rdfs:domain [ owl:unionOf ( exe:Agent exe:Contract ) ] ;
    rdfs:range exe:Bridge ;
    rdfs:label "has bridge" ;
    rdfs:comment """
Shows the bridging mechanism that an Agent or Contract uses to interface 
with the EXE main environment or other chains.
""" .

# Associates a Contract with the Agent that manages or deployed it
exe:managedBy a owl:ObjectProperty ;
    rdfs:domain exe:Contract ;
    rdfs:range exe:Agent ;
    rdfs:label "managed by" ;
    rdfs:comment """
Indicates the Agent responsible for deploying or managing a particular Contract 
(e.g., owns the contract or can upgrade it).
""" .

# Links an Agent or dApp to a Protocol it implements or is part of
exe:implementsProtocol a owl:ObjectProperty ;
    rdfs:domain [ owl:unionOf ( exe:Agent exe:dApp ) ] ;
    rdfs:range exe:Protocol ;
    rdfs:label "implements protocol" ;
    rdfs:comment """
Indicates that an Agent or dApp integrates a specific protocol (DeFi, GameFi, 
SocialFi, Gambling, etc.) for specialized functionality.
""" .

# Agents performing tasks
exe:performsTask a owl:ObjectProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range exe:Task ;
    rdfs:label "performs task" ;
    rdfs:comment """
Relates an Agent to the Task(s) it is executing or responsible for. 
Multiple Agents can perform the same Task if collaborating.
""" .

# Tasks requiring resources
exe:requiresResource a owl:ObjectProperty ;
    rdfs:domain exe:Task ;
    rdfs:range exe:Resource ;
    rdfs:label "requires resource" ;
    rdfs:comment """
Indicates which Resource(s) a Task needs. Examples: compute resources, 
APIs, or data sets.
""" .

# Linking a Task or Agent to Token usage
exe:usesToken a owl:ObjectProperty ;
    rdfs:domain owl:Thing ; 
    rdfs:range exe:Token ;
    rdfs:label "uses token" ;
    rdfs:comment """
Associates a Task or an Agent with a specific Token usage (payment, reward, 
stake, or collateral).
""" .

# Event referencing a Task
exe:refersToTask a owl:ObjectProperty ;
    rdfs:domain exe:Event ;
    rdfs:range exe:Task ;
    rdfs:label "refers to task" ;
    rdfs:comment """
Links an Event to the Task it concerns (e.g., TaskCreated event).
""" .

# Agent or dApp triggers an Event
exe:wasTriggeredBy a owl:ObjectProperty ;
    rdfs:domain exe:Event ;
    rdfs:range [ owl:unionOf ( exe:Agent exe:dApp ) ] ;
    rdfs:label "was triggered by" ;
    rdfs:comment """
Indicates which Agent or dApp caused or initiated an Event.
""" .

# Assign a Task to a specific Agent
exe:assignedTo a owl:ObjectProperty ;
    rdfs:domain exe:Task ;
    rdfs:range exe:Agent ;
    rdfs:label "assigned to" ;
    rdfs:comment """
Specifies the Agent currently responsible for or assigned to a given Task.
""" .

# A Task has a specific status
exe:hasStatus a owl:ObjectProperty ;
    rdfs:domain exe:Task ;
    rdfs:range exe:TaskStatus ;
    rdfs:label "has status" ;
    rdfs:comment """
Relates a Task to its lifecycle status (Created, InProgress, Completed, Cancelled).
""" .

# Collaboration referencing one or more Agents
exe:collaborationInvolvesAgent a owl:ObjectProperty ;
    rdfs:domain exe:Collaboration ;
    rdfs:range exe:Agent ;
    rdfs:label "collaboration involves agent" ;
    rdfs:comment """
Indicates that a Collaboration instance involves a particular Agent. 
Multiple Agents can be part of the same collaboration.
""" .

# Collaboration linked to a specific Task
exe:collaborationForTask a owl:ObjectProperty ;
    rdfs:domain exe:Collaboration ;
    rdfs:range exe:Task ;
    rdfs:label "collaboration for task" ;
    rdfs:comment """
Specifies the Task that is the focus or target of a Collaboration. 
""" .

# Negotiation belongs to a Collaboration
exe:hasNegotiation a owl:ObjectProperty ;
    rdfs:domain exe:Collaboration ;
    rdfs:range exe:Negotiation ;
    rdfs:label "has negotiation" ;
    rdfs:comment """
Indicates that a Collaboration includes or spawns a Negotiation process 
(e.g., terms, payment, resource sharing).
""" .

# Agents can negotiate with each other
exe:negotiatesWith a owl:ObjectProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range exe:Agent ;
    rdfs:label "negotiates with" ;
    rdfs:comment """
Agent-to-Agent negotiation relationship. It can be used in parallel with 
a Negotiation instance or simply to denote a historical or ongoing negotiation link.
""" .

# Agent has or uses a particular Role
exe:hasRole a owl:ObjectProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range exe:Role ;
    rdfs:label "has role" ;
    rdfs:comment """
Assigns a functional Role (e.g., Validator, LiquidityProvider, Player) to an Agent.
""" .

# Agent has or uses a certain Capability
exe:hasCapability a owl:ObjectProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range exe:Capability ;
    rdfs:label "has capability" ;
    rdfs:comment """
Indicates a specialized skill or function an Agent can perform 
(e.g. 'validates tasks', 'provides liquidity').
""" .

# Agent or Collaboration uses a certain Interaction Type
exe:hasInteractionType a owl:ObjectProperty ;
    rdfs:domain [ owl:unionOf ( exe:Agent exe:Collaboration exe:Task ) ] ;
    rdfs:range exe:InteractionType ;
    rdfs:label "has interaction type" ;
    rdfs:comment """
Specifies the mode (H2M, M2M, M2H) in which a Task, Collaboration, or Agent 
operates or communicates.
""" .

################################################################################
# Data Properties
################################################################################

# Agent's on-chain address
exe:hasAddress a owl:DatatypeProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range xsd:string ;
    rdfs:label "has address" ;
    rdfs:comment "Stores an Agent's on-chain address (Ethereum, CrossFi, etc.)." .

# Contract's on-chain address
exe:contractAddress a owl:DatatypeProperty ;
    rdfs:domain exe:Contract ;
    rdfs:range xsd:string ;
    rdfs:label "contract address" ;
    rdfs:comment "Specifies the deployed on-chain address of this Contract." .

# Contract's ABI
exe:hasABI a owl:DatatypeProperty ;
    rdfs:domain exe:Contract ;
    rdfs:range xsd:string ;
    rdfs:label "has ABI" ;
    rdfs:comment "Stores a textual or JSON representation of the contract's ABI for invocation." .

# Store the name of any entity
exe:hasName a owl:DatatypeProperty ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
    rdfs:label "has name" ;
    rdfs:comment "A human-readable name for Agents, Tasks, Protocols, Roles, etc." .

# Store a textual description of any entity
exe:hasDescription a owl:DatatypeProperty ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
    rdfs:label "has description" ;
    rdfs:comment "A longer description or notes about an entity." .

# Timestamp when a Task was created
exe:hasCreationDate a owl:DatatypeProperty ;
    rdfs:domain exe:Task ;
    rdfs:range xsd:dateTime ;
    rdfs:label "has creation date" ;
    rdfs:comment "Records when a Task was first created in the system." .

# Desired or required completion date/time for a Task
exe:hasDeadline a owl:DatatypeProperty ;
    rdfs:domain exe:Task ;
    rdfs:range xsd:dateTime ;
    rdfs:label "has deadline" ;
    rdfs:comment "Indicates a target or mandatory date/time by which the Task should be completed." .

# Blockchain block number for an Event
exe:hasBlockNumber a owl:DatatypeProperty ;
    rdfs:domain exe:Event ;
    rdfs:range xsd:integer ;
    rdfs:label "has block number" ;
    rdfs:comment "References the block number on the blockchain where this Event was recorded." .

# Transaction hash for an Event
exe:hasTransactionHash a owl:DatatypeProperty ;
    rdfs:domain exe:Event ;
    rdfs:range xsd:string ;
    rdfs:label "has transaction hash" ;
    rdfs:comment "Links an Event to the on-chain transaction hash it occurred in." .

# Data Format name or identifier
exe:formatName a owl:DatatypeProperty ;
    rdfs:domain exe:DataFormat ;
    rdfs:range xsd:string ;
    rdfs:label "format name" ;
    rdfs:comment "Name or identifier of the data format (e.g., JSON, XML, Protobuf)." .

# An Agent's or Collaboration's negotiation terms or outcome
exe:agreementTerms a owl:DatatypeProperty ;
    rdfs:domain exe:Negotiation ;
    rdfs:range xsd:string ;
    rdfs:label "agreement terms" ;
    rdfs:comment "A textual representation of the final or proposed agreement (e.g., price, conditions)." .

# Contact endpoint for an Agent (e.g., API URL, or internal registry ID)
exe:contactEndpoint a owl:DatatypeProperty ;
    rdfs:domain exe:Agent ;
    rdfs:range xsd:string ;
    rdfs:label "contact endpoint" ;
    rdfs:comment """
A URI, URL, or other endpoint through which other entities (Agents, users) 
can communicate with or send requests to this Agent.
""" .

################################################################################
# Example Individuals for Protocols, Roles, Capabilities (demonstration)
################################################################################

# Additional specialized protocols
exe:GameFiX a exe:GameFiProtocol ;
    exe:hasName "GameFiX Protocol" ;
    rdfs:comment "An example GameFi protocol involving NFT-based game assets and play-to-earn mechanics." .

exe:SocialFiZ a exe:SocialFiProtocol ;
    exe:hasName "SocialFiZ Protocol" ;
    rdfs:comment "An example SocialFi protocol that tokenizes social influence and community interactions." .

exe:GambleCoin a exe:GamblingProtocol ;
    exe:hasName "GambleCoin Protocol" ;
    rdfs:comment "A sample Gambling protocol for decentralized casino-style games." .

# Example roles
exe:ValidatorRole a exe:Role ;
    exe:hasName "Validator Role" ;
    rdfs:comment "Agent role: can validate tasks or check correctness, possibly using ZK-proofs." .

exe:LiquidityProviderRole a exe:Role ;
    exe:hasName "Liquidity Provider Role" ;
    rdfs:comment "Agent role: supplies liquidity in DeFi or invests in liquidity pools." .

exe:GamePlayerRole a exe:Role ;
    exe:hasName "Game Player Role" ;
    rdfs:comment "Agent role: participates in GameFi protocols or NFT-based games." .

# Example capabilities
exe:ProvidesLiquidity a exe:Capability ;
    exe:hasName "providesLiquidity" ;
    rdfs:comment "Indicates that the agent can supply liquidity to a protocol (e.g. DeFi pools)." .

exe:ValidatesTasks a exe:Capability ;
    exe:hasName "validatesTasks" ;
    rdfs:comment "Indicates that the agent can check correctness or finalize tasks." .

exe:ManagesNFTs a exe:Capability ;
    exe:hasName "managesNFTs" ;
    rdfs:comment "Indicates that the agent can handle NFT minting, transferring, or in-game assets." .

################################################################################
# End of EXE Ontology
################################################################################
